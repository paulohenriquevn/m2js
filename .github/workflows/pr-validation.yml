name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for breaking changes
      run: |
        echo "🔍 Checking for breaking changes..."
        # Check if major version should be bumped
        if git diff origin/main --name-only | grep -E "(src/cli.ts|src/types.ts|package.json)"; then
          echo "⚠️  Core files modified - review for breaking changes"
        fi

    - name: Validate commit messages
      run: |
        echo "📝 Validating commit messages..."
        # Check if commits follow conventional format
        commits=$(git log --format="%s" origin/main..HEAD)
        while IFS= read -r commit; do
          if [[ ! $commit =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ ]]; then
            echo "❌ Invalid commit format: $commit"
            echo "Use: feat: description, fix: description, etc."
            exit 1
          fi
        done <<< "$commits"
        echo "✅ All commits follow conventional format"

    - name: Check file size limits
      run: |
        echo "📏 Checking file size limits..."
        # Check for files exceeding size limits (from CLAUDE.md)
        find src -name "*.ts" -exec wc -l {} \; | while read lines file; do
          if [ "$lines" -gt 300 ]; then
            echo "❌ File too large: $file ($lines lines > 300 limit)"
            exit 1
          fi
        done
        echo "✅ All files within size limits"

    - name: Run TypeScript strict check
      run: |
        echo "🔍 Running TypeScript strict validation..."
        npx tsc --noEmit --strict
        echo "✅ TypeScript strict mode passed"

    - name: Lint with error reporting
      run: |
        echo "🧹 Running ESLint with strict rules..."
        npm run lint
        echo "✅ Linting passed"

    - name: Test coverage threshold
      run: |
        echo "🧪 Checking test coverage..."
        npm run test:coverage
        
        # Extract coverage percentage
        coverage=$(cat coverage/lcov-report/index.html | grep -o 'Lines.*%' | head -1 | grep -o '[0-9]\+\.[0-9]\+')
        echo "Current coverage: $coverage%"
        
        # Require minimum 80% coverage
        if (( $(echo "$coverage < 80" | bc -l) )); then
          echo "❌ Coverage too low: $coverage% (minimum: 80%)"
          exit 1
        fi
        echo "✅ Coverage meets requirements: $coverage%"

    - name: Performance regression check
      run: |
        echo "⚡ Checking for performance regressions..."
        npm run build
        npm link
        
        # Test performance with benchmark file
        time_before=$(date +%s%N)
        m2js examples/User.ts --output pr-test.md >/dev/null 2>&1
        time_after=$(date +%s%N)
        
        duration=$((($time_after - $time_before) / 1000000))
        echo "Processing time: ${duration}ms"
        
        # Fail if processing takes more than 2 seconds
        if [ "$duration" -gt 2000 ]; then
          echo "❌ Performance regression detected: ${duration}ms > 2000ms"
          exit 1
        fi
        echo "✅ Performance within acceptable limits"

    - name: CLI integration test
      run: |
        echo "🔧 Testing CLI integration..."
        npm link
        
        # Test basic functionality
        m2js --version
        m2js --help
        
        # Test with example files
        m2js examples/User.ts --output cli-test.md
        
        # Verify output quality
        if [ ! -f cli-test.md ]; then
          echo "❌ CLI failed to generate output"
          exit 1
        fi
        
        lines=$(wc -l < cli-test.md)
        if [ "$lines" -lt 10 ]; then
          echo "❌ Generated output too short: $lines lines"
          exit 1
        fi
        
        echo "✅ CLI integration test passed"

  extension-validation:
    name: Extension Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install main dependencies
      run: npm ci

    - name: Build main project
      run: npm run build

    - name: Validate extension
      run: |
        cd vscode-extension
        echo "🔧 Validating VS Code extension..."
        
        # Install extension dependencies
        npm ci
        
        # Check TypeScript compilation
        npx tsc --noEmit
        
        # Compile extension
        npm run compile
        
        # Check if all required files exist
        required_files=("out/extension.js" "out/m2jsManager.js" "out/webviewProvider.js")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
        echo "✅ Extension validation passed"

    - name: Package extension
      run: |
        cd vscode-extension
        npm install -g vsce
        vsce package --no-dependencies
        echo "✅ Extension packaged successfully"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Check documentation updates
      run: |
        echo "📚 Checking documentation..."
        
        # Check if code changes require doc updates
        if git diff origin/main --name-only | grep -E "src/.*\.ts$"; then
          echo "Code changes detected - checking for doc updates..."
          
          if ! git diff origin/main --name-only | grep -E "(README\.md|docs/.*\.md|CHANGELOG\.md)"; then
            echo "⚠️  Code changes may require documentation updates"
            echo "Consider updating README.md, docs/, or CHANGELOG.md"
          fi
        fi

    - name: Validate markdown
      run: |
        echo "📝 Validating markdown files..."
        # Basic markdown validation
        find . -name "*.md" -not -path "./node_modules/*" -exec sh -c '
          for file do
            echo "Checking $file..."
            # Check for basic markdown issues
            if grep -q "]()" "$file"; then
              echo "❌ Empty link found in $file"
              exit 1
            fi
          done
        ' sh {} +
        echo "✅ Markdown validation passed"

    - name: Check CLAUDE.md compliance
      run: |
        echo "📋 Checking CLAUDE.md rule compliance..."
        
        # Check for violations of CLAUDE.md rules
        violations=0
        
        # Check file size limits
        while IFS= read -r file; do
          lines=$(wc -l < "$file")
          if [ "$lines" -gt 300 ]; then
            echo "❌ File exceeds 300 lines: $file ($lines lines)"
            violations=$((violations + 1))
          fi
        done < <(find src -name "*.ts")
        
        # Check for 'any' type usage
        if grep -r ": any" src/; then
          echo "❌ 'any' type found - violates strict TypeScript rule"
          violations=$((violations + 1))
        fi
        
        # Check for console.log statements
        if grep -r "console\.log" src/; then
          echo "❌ console.log found - should be removed"
          violations=$((violations + 1))
        fi
        
        if [ "$violations" -gt 0 ]; then
          echo "❌ $violations CLAUDE.md rule violations found"
          exit 1
        fi
        
        echo "✅ CLAUDE.md compliance check passed"

  final-approval:
    name: Final Approval Check
    runs-on: ubuntu-latest
    needs: [quality-gate, extension-validation, documentation]

    steps:
    - name: All checks passed
      run: |
        echo "🎉 All quality gates passed!"
        echo "✅ Code quality check"
        echo "✅ Extension validation"
        echo "✅ Documentation check"
        echo ""
        echo "🚀 PR is ready for review and merge!"